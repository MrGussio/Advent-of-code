inp w
mul x 0
add x z
mod x 26 <-- a: or 1
div z 1
add x 11 <-- b: random value
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w
add y 6 <-- c: random value
mul y x
add z y




x = ((z % 26) + b) !== w
z /= a (1 or 26)
z *= 25x+1 (always 1 or 26 because X is either 0 or 1 due to the equals condition)
z += (w+c)*x

In some cases, a = 1 and in some cases a = 26.

In case x > 10 or x < 1, the two equals will always set x = 1 (because X cannot be equal to W).

In case x = w, eventually x = 0.

If x = 1, we multiply Z by 26 and add the number with a random offset
If x = 0, we multiply Z by 1 and add nothing. (hence only divide by 26)

We get a pattern like ((w1 + K)*26 + (w2 + L))*26 + (w3+M) ....
When we perform %=26, we are left with the last part (w3+M) (hence x is equal to w of previous iteration)
When we perform /=26, we are left with ((w1+k)* 26 + (w2 + L) + (w3+M)/26
Since (w3+M) is always smaller than 26, this gets reduced to ((w1+k)* 26 + (w2 + L) (divisions are always rounded down)

In order to have z = 0 at the end, we should have x = w when we divide by 26.

Then

input #1:
x = (z % 26) + 11, can never be equal to W, hence x = 1
z = (w1+6)

input #2:
x = (z % 26) + 13, can never be equal to W, hence x = 1
z += z*26+(w2 + 14)

input #3:
x = (z % 26) + 15, can never be equal to W, hence x =1
z += z*26+(w3 + 14)

input #4 (div by 26):
x = (z % 26) - 8 = (w3+14)-8
In order to let x = w, we have w4 = w3 + 14 - 8

z *= 1 + (w4+10)*0 == z (does not change)

input #5:
x = (z % 26) + 13 can never be equal to W, hence x = 1
z += z*26+(w5+9)

input #6:
x = (z % 26) + 15, can never be equal to W, hence x=1
z += z*26+(w6+12)

input #7 (div by 26):
x = (z % 26) - 11 = (w6+12) - 11
In order to let x =w, we have w7 = w6 + 12 - 11

input #8 (div by 26):
x = (z % 26) - 4 = w5 + 9 - 4
In order to let x = w, we have w8 = w5 + 9 - 4

input #9 (div by 26):
x = (z % 26) - 15 = w2 + 14 - 15
In order to let x = w, we have w9 = w2 + 14 - 15

input #10:
x = (z % 26) + 14, hence x = 1
z += z*26 + (w10 + 6)

input #11:
x = (z % 26) + 14 hence x = 1
z += z*26 + (w11 + 9)

input #12 (div by 26):
x = (z % 26)-1 = w11 + 9 - 1
In order to lex x = w, we have w12 = w11 + 9 - 1

input #13 (div by 26):
x = (z % 26) - 8 = w10 + 6 - 8
In order to let x = w, we have w13 = w 10 + 6 - 8

input #14 (div by 26):
x = (z % 26) - 14 = w1 + 6 - 14
In order to let x = w, we have w14 = w1 + 6 - 14

For every w as 1 <= w <= 9

w4 = w3 + 6	    (9, 3)
w7 = w6 + 1	    (9, 8)
w8 = w5 + 5	    (9, 4)
w9 = w2 - 1	    (8, 9)
w12 = w11 + 8	(9, 1)
w13 = w10 - 2	(7, 9)
w14 = w1 - 8	(1, 9)

w1 = 9
w2 = 9
w3 = 3
w4 = 9
w5 = 4
w6 = 8
w7 = 9
w8 = 9
w9 = 8
w10= 9
w11= 1
w12= 9
w13= 7
w14= 1

99394899891971

w4 = w3 + 6	    (7, 1)
w7 = w6 + 1	    (2, 1)
w8 = w5 + 5	    (6, 1)
w9 = w2 - 1	    (1, 2)
w12 = w11 + 8	(9, 1)
w13 = w10 - 2	(1, 3)
w14 = w1 - 8	(1, 9)

w1 = 9
w2 = 2
w3 = 1
w4 = 7
w5 = 1
w6 = 1
w7 = 2
w8 = 6
w9 = 1
w10 = 3
w11 = 1
w12 = 9
w13 = 1
w14 = 1

92171126131911